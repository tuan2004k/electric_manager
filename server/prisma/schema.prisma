generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  password        String // Hash với bcrypt
  role            Role             @default(USER)
  apartments      Apartment[]
  recommendations Recommendation[] // Thêm opposite field cho Recommendation
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("users")
}

model Apartment {
  id        String   @id @default(cuid())
  name      String
  address   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  devices   Device[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("apartments")
}

model Device {
  id                 String              @id @default(cuid())
  name               String
  type               DeviceType
  macAddress         String              @unique
  apartmentId        String
  apartment          Apartment           @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  consumptionRecords ConsumptionRecord[]
  anomalies          Anomaly[] // Thêm opposite field cho Anomaly
  status             DeviceStatus        @default(ONLINE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("devices")
}

model ConsumptionRecord {
  id        String   @id @default(cuid())
  deviceId  String
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  voltage   Float
  current   Float
  power     Float
  energy    Float

  @@index([deviceId, timestamp])
  @@map("consumption_records")
}

model Anomaly {
  id          String      @id @default(cuid())
  deviceId    String?
  device      Device?     @relation(fields: [deviceId], references: [id])
  type        AnomalyType
  description String
  severity    Int
  timestamp   DateTime    @default(now())
  resolved    Boolean     @default(false)

  @@map("anomalies")
}

model Recommendation {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  title            String
  description      String
  estimatedSavings Float
  applied          Boolean  @default(false)
  timestamp        DateTime @default(now())

  @@map("recommendations")
}

enum Role {
  USER
  ADMIN
}

enum DeviceType {
  ESP8266
  ZIGBEE
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  ERROR
}

enum AnomalyType {
  SPIKE
  DROP
  IRREGULAR
}